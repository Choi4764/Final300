syntax = "proto3";

//실패
enum GlobalFailCode {
    NONE = 0;
    UNKNOWN_ERROR = 1;
    INVALID_REQUEST = 2;
    AUTHENTICATION_FAILED = 3;
}

//게임 데이터 명세
message PlayerInfo{
    int32 playerId = 1; // 서버 내부관리코드   
    string nickname = 2;
    int32 class = 3;

    TransformInfo transform = 4;
    StatInfo statInfo = 5;
}

message TransformInfo{
    float posX = 1; // 기본값 : -9 ~ 9
    float posY = 2; // 기본값 : 1
    float posZ = 3; // 기본값 : -8 ~ 8
    float rot = 4; // 기본값 : 0~360
}

message StatInfo{
    int32 level = 1;
    float hp = 2;
    float maxHp = 3;
    float mp = 4;
    float maxMp = 5;
    float atk = 6;
    float def = 7;
    float magic = 8;
    float speed = 9; 
}

message ScreenText{
    string msg = 1;
    bool typingAnimation = 2;
    optional ScreenTextAlignment alignment = 3;
    optional Color textColor = 4;
    optional Color screenColor = 5;
}

message ScreenTextAlignment{
    int32 x = 1;
    int32 y = 2;
}

message Color{
    int32 r = 1;
    int32 g = 2;
    int32 b = 3;
}

message DungeonInfo{
     int32 dungeonCode = 1;
     repeated MonsterStatus monsters = 2;
}

message MonsterStatus{
    int32 monsterIdx = 1;
    int32 monsterModel = 2;
    string monsterName = 3;
    float monsterHp = 4;
}

message ActionSet{
    int32 animCode = 1;
    int32 effectCode = 2;
}

message PlayerStatus{
    int32 playerClass = 1;
    int32 playerLevel = 2;
    string playerName = 3;
    float playerFullHp = 4;
    float playerFullMp = 5;
    float playerCurHp = 6;
    float playerCurMp = 7;
}

message BattleLog{
    string msg = 1;
    bool typingAnimation = 2;
    repeated BtnInfo btns = 3; // Optional
}

message BtnInfo{
    string msg = 1;
    bool enable = 2;
}

//패킷 명세
message C_SigninRequest{
    string id = 1;
    string password = 2;
    string email = 3;
    string verifyPassword = 4;
}

message S_SigninResponse{
    bool success = 1;
    string message = 2;
    GlobalFailCode failCode = 3;
}

message C_LoginRequest{
    string id = 1;
    string password = 2;
}

message S_LoginRequest{
    bool success = 1;
    string message = 2;
    string token = 3;
    GlobalFailCode failCode = 4;    
}

message C_EnterRequest{
    string nickname = 1;
    int32 class = 2;
}

message S_EnterResponse{
    PlayerInfo player = 1;
}

message S_SpawnNotification{
    repeated PlayerInfo players = 1;
}

message S_DespawnNotification{
    repeated int32 playerIds = 1;
}

message C_MoveRequest{
    TransformInfo transform = 1;
}

message S_MoveResponse{
    int32 playerId = 1;
    TransformInfo transform = 2;
}

message C_AnimationRequest{
    int32 aniCode = 1;
}

message S_AnimationResponse{
    int32 playerId = 1;
    int32 aniCode = 2;
}

message C_ChatRequest{
    int32 playerId = 1;
    string senderName = 2;
    string chatMsg = 3;
}

message S_ChatResponse{
  int32 playerId = 1;
  string chatMsg = 2;
}

message C_EnterDungeonRequest{
  int32 dungeonCode = 1;
}

message S_EnterDungeonResponse{
  DungeonInfo dungeonInfo = 1;
  PlayerStatus player = 2;
  ScreenText screenText = 3; // Option
  BattleLog battleLog = 4;
}

message C_EquipItemRequest

message S_EquipItemResponse

message C_UnequipItemResponse

message S_UnequipItemResponse

message C_BuyItemRequest

message S_BuyItemResponse

message C_SellItemRequest

message S_SellItemResponse

message S_BattleLogNoification{
    BattleLog battleLog = 1;
}

message S_SetPlayerHpNotification{
    float hp = 1;
}

message S_SetPlayerMpNotification{
    float mp = 1;
}

message S_SetMonsterHpNotification{
    int32 monsterIdx = 1;
    float hp = 2;
}

message S_PlayerActionResponse{
    int32 targetMonsterIdx = 1;
    ActionSet actionSet = 2;
}

message S_MonsterActionNotification{
    int32 actionMonsterIdx = 1;
    ActionSet actionSet = 2;
}

message C_LeaveDungeonRequest

message S_LeaveDungeonResponse

